# Remote Car Control by Flask web service
# Jonathan Suh www.creapple.com

#Import GPIO, time library
from flask import Flask, render_template, request
import RPi.GPIO as GPIO                 
import time      

app = Flask(__name__)

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

DIGIT_L = 23 #sensor
DIGIT_R = 24

R_FW = 26  #mortor
R_BW = 19
R_PWM = 13
L_FW = 21
L_BW = 20
L_PWM = 16

GPIO.setup(DIGIT_L,GPIO.IN)
GPIO.setup(DIGIT_R,GPIO.IN)

GPIO.setup(R_FW, GPIO.OUT)
GPIO.setup(R_BW, GPIO.OUT)
GPIO.setup(R_PWM, GPIO.OUT)
GPIO.output(R_PWM, 0)
R_MOTOR = GPIO.PWM(R_PWM, 100)
R_MOTOR.start(0)
R_MOTOR.ChangeDutyCycle(0)

GPIO.setup(L_FW, GPIO.OUT)
GPIO.setup(L_BW, GPIO.OUT)
GPIO.setup(L_PWM, GPIO.OUT)
GPIO.output(L_PWM, 0)
L_MOTOR = GPIO.PWM(L_PWM, 100)
L_MOTOR.start(0)
L_MOTOR.ChangeDutyCycle(0)

def RMotor(forward, backward, pwm):
    GPIO.output(R_FW, forward)
    GPIO.output(R_BW, backward)
    R_MOTOR.ChangeDutyCycle(pwm)
    
def LMotor(forward, backward, pwm):
    GPIO.output(L_FW, forward)
    GPIO.output(L_BW, backward)
    L_MOTOR.ChangeDutyCycle(pwm)
    
def Fmove(power):
    RMotor(1,0,power)
    LMotor(1,0,power)
    time.sleep(2)
def Rmove(power):     
    RMotor(1,0,power)
    LMotor(0,0,power)
    time.sleep(0.3)
def Lmove(power):     
    RMotor(0,0,power)
    LMotor(1,0,power)
    time.sleep(0.3)
def Smove():     
    RMotor(0,0,0)
    LMotor(0,0,0)
    
@app.route("/")
def hello():
    return "Hello Pyrhon IoT Projects!"

@app.route("/<command>")
def action(command):
    power = 70
    if command == "F":
        RMotor(1,0,70)
        LMotor(1,0,70)
        time.sleep(1)
        message = "Moving Foward"
    elif command == "L":
        RMotor(0,0,70)
        LMotor(1,0,70)
        time.sleep(1)
        message = "Turn Left"
    elif command == "R":
        RMotor(1,0,70)
        LMotor(0,0,70)
        time.sleep(1)   
        message = "Turn Right"  
    else:
        RMotor(0,0,0)
        LMotor(0,0,0)
        message = "Unknown Command [" + command + "] " 

    return render_template('car.html', message = message)

if __name__ == "__main__":
    try:
        app.run(host='0.0.0.0', port=8000, debug=True)
    except KeyboardInterrupt:
        print ("Terminate program by Keyboard Interrupt")
        GPIO.cleanup()
    finally:
        GPIO.cleanup()
